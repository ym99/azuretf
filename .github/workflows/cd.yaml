name: cd

on:
  push:
    branches:
      - main
    paths:
      - 'src/terraform/**'
      - '.github/workflows/**'

env:
  TERRAFORM_WORKING_DIRECTORY: src/terraform
  DOTNET_WORKING_DIRECTORY: ./src/dotnet
  APPLICATION_NAME: aztf
  ENVIRONMENT_NAME: dev
  DOTNET_VERSION: 6.0.x

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Install dependencies
        run: dotnet restore azuretf.sln
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Build
        run: dotnet build azuretf.sln --configuration Release --no-restore 
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Test
        run: dotnet test azuretf.sln --no-restore --verbosity normal --filter Category=Unit
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Publish
        run: dotnet publish ./GitHubCrawler/GitHubCrawler.csproj -c Release -o ./publish
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Generate Deployemtn Package
        run: |
          zip -r ../deployment.zip ./
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}/publish

      - name: Upload Deployemnt Package 
        uses: actions/upload-artifact@v3
        with:
          name: function-deployment
          path: ${{ env.DOTNET_WORKING_DIRECTORY }}/deployment.zip

  terraform:
    runs-on: ubuntu-latest
    outputs:
      resource_group_name: ${{ steps.apply.outputs.resource_group_name }}
      function_name: ${{ steps.apply.outputs.function_name }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.5
          terraform_wrap: false

      - id: apply
        name: Terraform Apply
        env:
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
          BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
          BACKEND_STORAGE_CONTAINER_NAME: ${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}
          TF_VAR_application_name: ${{ env.APPLICATION_NAME }}
          TF_VAR_environment_name: ${{ env.ENVIRONMENT_NAME }}
          TF_BACKEND_KEY: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT_NAME }}
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}" \
          -backend-config="key=${{ env.TF_BACKEND_KEY }}.tfstate"

          terraform apply -auto-approve

          resource_group_name=$(terraform output -raw resource_group_name)
          echo $resource_group_name
          echo "resource_group_name=$resource_group_name" >> "$GITHUB_OUPUT"

          function_name=$(terraform output -raw function_name)
          echo $function_name
          echo "function_name=$function_name" >> "$GITHUB_OUTPUT"

  deploy:
    needs: [ terraform, build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifacts@v3
        with:
          name: function-deployment

      - name: Deploy
        env:
            ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
            ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_grou_name }}
            FUNCTION_NAME: ${{ needs.terraform.outputs.function_name }}
        run: |
          az login --service-princial -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az account set -s $ARM_SUBSCRIPTION_ID
          az functionapp deployment source config-zip -g $RESOURCE_GROUP_NME -n $FUNCTION_APP_NAME --src ./deployment.zip
